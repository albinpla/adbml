{
  "_from": "idb-file-storage",
  "_id": "idb-file-storage@0.1.0",
  "_inBundle": false,
  "_integrity": "sha1-PNmDAUXten5Xf61A5jq2pjF+uVU=",
  "_location": "/idb-file-storage",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "idb-file-storage",
    "fetchSpec": "latest",
    "name": "idb-file-storage",
    "raw": "idb-file-storage",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/idb-file-storage/-/idb-file-storage-0.1.0.tgz",
  "_shasum": "3cd9830145ed7a7e577fad40e63ab6a6317eb955",
  "_spec": "idb-file-storage",
  "_where": "/home/wiz/adb/firefox/major",
  "author": {
    "email": "lgreco@mozilla.com",
    "name": "Luca Greco"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Simple Promise-based IndexedDB wrapper to store files",
  "devDependencies": {
    "babel-plugin-istanbul": "4.1.3",
    "babel-plugin-transform-es2015-modules-umd": "6.24.1",
    "babel-preset-babili": "0.0.12",
    "chai": "3.5.0",
    "conventional-changelog-cli": "1.3.1",
    "esdoc": "0.5.2",
    "gh-pages": "1.0.0",
    "gulp": "3.9.1",
    "gulp-babel": "6.1.2",
    "gulp-esdoc": "0.4.1",
    "gulp-notify": "3.0.0",
    "gulp-plumber": "1.1.0",
    "gulp-rename": "1.2.2",
    "gulp-sourcemaps": "2.6.0",
    "gulp-xo": "0.15.0",
    "karma": "1.6.0",
    "karma-babel-preprocessor": "6.0.1",
    "karma-chai": "0.1.0",
    "karma-chai-plugins": "0.9.0",
    "karma-chrome-launcher": "2.1.0",
    "karma-coverage": "1.1.1",
    "karma-firefox-launcher": "1.0.1",
    "karma-mocha": "1.3.0",
    "karma-notify-reporter": "1.0.1",
    "karma-phantomjs-launcher": "1.0.4",
    "karma-sinon": "1.0.5",
    "mocha": "3.3.0",
    "sinon": "2.2.0",
    "xo": "0.18.1"
  },
  "files": [
    "dist",
    "src"
  ],
  "keywords": [
    "File",
    "IndexedDB",
    "MutableFile",
    "Storage",
    "WebExtensions"
  ],
  "license": "MPL-2.0",
  "main": "dist/idb-file-storage.js",
  "name": "idb-file-storage",
  "optionalDependencies": {},
  "readme": "IDB File Storage\r\n================\r\n\r\n[![Build Status](https://travis-ci.org/rpl/atom-webextensions.svg?branch=master)](https://travis-ci.org/rpl/atom-webextensions)\r\n[![esdoc Coverage](https://doc.esdoc.org/github.com/rpl/idb-file-storage/badge.svg)](https://doc.esdoc.org/github.com/rpl/idb-file-storage)\r\n\r\n**Status: Prototype/Proposal.**\r\n\r\nThis library wraps some of the IndexedDB features related to store files into a Promised API.\r\n\r\nWhile on Chrome this library only provides a basic API to store File and Blob instances,\r\non Firefox it also provides a Promise based API wrapper for the non-standard [IDBMutableFile][IDBMutableFile] API.\r\n\r\nThe non-standard [IDBMutableFile][IDBMutableFile] API allows to create and optionally persist into the an IndexedDB database a file object which provides an API to be able to read and change the file content without loading all its content in the memory.\r\n\r\nThis library should allow WebExtensions add-ons to be able to store and manipulate files more efficiently, without providing direct access to arbitrary files on the user filesystem.\r\n\r\nThe Promise based [IDBMutableFile][IDBMutableFile] API is currently not available when this library runs on Chrome (e.g. as a Chrome extension), but it still works for storing and retrieving Blob and File instances.\r\nEven if not yet implemented, providing a polyfill for the [IDBMutableFile][IDBMutableFile] API on Chrome based on Blob instances is technically possible.\r\n\r\nA more detailed **API reference** (generated using esdoc from the inline comments),\r\nand a collection of small examples are available at the following urls:\r\n\r\n* API Reference: https://doc.esdoc.org/github.com/rpl/idb-file-storage/\r\n* Examples:\r\n  - Live Demo: https://rpl.github.io/idb-file-storage/examples/\r\n  - Source: https://github.com/rpl/idb-file-storage/tree/master/examples/\r\n\r\nHow to use it\r\n-------------\r\n\r\nThe library is wrapped as an UMD module, and so it can be included as a CommonJS\r\nmodule using a CommonJS module loader (e.g. webpack, browserify, rollup, ...) or\r\nas an AMD module from a AMD module loader (e.g. RequireJS), as well as just included\r\nas a tag script into an HTML page.\r\n\r\n```js\r\nasync function testIDBFiles() {\r\n  const tmpFiles = await IDBFiles.getFileStorage({name: \"tmpFiles\"});\r\n\r\n  const file = await tmpFiles.createMutableFile(\"path/filename.txt\");\r\n  const fh = file.open(\"readwrite\");\r\n\r\n  const metadata = await fh.getMetadata();\r\n  console.log(metadata.size); // -> 0\r\n\r\n  await fh.append(\"new file content\");\r\n\r\n  const metadata = await fh.getMetadata();\r\n  console.log(metadata.size); // -> updated size\r\n\r\n  await fh.close();\r\n\r\n  await file.persist();\r\n\r\n  const fileNames = await tmpFiles.list();\r\n  console.log(fileNames); // -> [\"path/filename.txt\"]\r\n\r\n  const file = await tmpFiles.get(\"path/filename.txt\");\r\n  // Only open if its a mutable file.\r\n  if (file.open) {\r\n    const fh = file.open(\"readonly\");\r\n    const metadata = await fh.getMetadata();\r\n    console.log(metadata.size); // -> updated size\r\n  }\r\n\r\n  await tmpFiles.clear(); // or tmpFiles.remove(\"path/filename.txt\")\r\n  const fileNames = await tmpFiles.list();\r\n  console.log(fileNames); // -> []\r\n}\r\n```\r\n\r\nBuilding, Testing and Hacking\r\n-----------------------------\r\n\r\nBuilding the source file into a UMD module (and lint the javascript sources in the process):\r\n\r\n```\r\n$ npm run build\r\n...\r\n```\r\n\r\nRunning the karma tests (which also builds the library and open a Chrome and a Firefox instance and run the test on both):\r\n\r\n```\r\n$ npm run test\r\n```\r\n\r\nWhile working on the library or test sources, you may want to watch the sources for changes and lint, rebuild and re-run the tests accordingly:\r\n\r\n```\r\n$ npm run test:watch\r\n````\r\n\r\n[IDBMutableFile]: https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "gulp",
    "build:watch": "gulp default:watch",
    "changelog": "conventional-changelog -p angular -u",
    "docs": "gulp esdoc",
    "publish:gh-pages": "gulp gh-pages && gh-pages -d gh-pages",
    "test": "xo --reporter codeframe && npm run build && karma start --single-run",
    "test:watch": "gulp test:watch"
  },
  "version": "0.1.0",
  "xo": {
    "envs": "browser",
    "ignored": [
      "dist/**",
      "docs/**"
    ],
    "overrides": [
      {
        "files": "test/**/*.js",
        "globals": [
          "describe",
          "it",
          "before",
          "after",
          "beforeEach",
          "afterEach",
          "expect",
          "IDBFiles",
          "skipOnSupportedIDBMutableFile",
          "skipOnUnsupportedIDBMutableFile"
        ]
      }
    ],
    "rules": {
      "generator-star-spacing": [
        {
          "before": false,
          "after": true
        },
        "error"
      ],
      "quotes": [
        "double",
        "error"
      ]
    },
    "space": true
  }
}
